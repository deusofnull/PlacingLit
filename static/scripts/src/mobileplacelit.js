// Generated by CoffeeScript 1.10.0
(function() {
  'class MobilePLMap\nconstructor: ->\n  #startPos = null\n  @elements =\n    ###modals:\n      mapmodal: $(\'#mapmodal\')\n      querymodal: $(\'#querymodal\')###\n  @path = window.location.pathname # intially = \'/\'\n\n  @search = @parseQuery(window.location.search)\n  @scenes = window.SCENES\n\n  console.log(\'MobilePLMap initalized\')\n\n\nshowModal: (element) ->\n  element.modal()\n\nisFiltered: ->\n  if (@path.indexOf(\'collections\') == -1) and (@path.indexOf(\'author\') == -1) and (@path.indexOf(\'title\') == -1)\n    return false\n  return true\n\nhasScenes: ->\n  return @scenes and @scenes.length > 0\n\ncloseFeatContent: ->\n  $(\'#mapOverlay\').hide()\n\nparseQuery: (q)->\n  result = {}\n  splitq = q.split \'&\'\n  for param in splitq\n    vals = param.split \'=\'\n    result[vals[0]] = vals[1]\n  result\n\nselectMapView: ->\n  # Temporary hack to get a map down on the page\n\n  if @isFiltered() and @hasScenes()\n    # This means the view is the result of a search\n    return new PlacingLit.Views.MapFilterView(@scenes)\n    # This means the view is a default map view\n\n  return new PlacingLit.Views.MapCanvasView\n\n\n$ ->\nplmap = new MobilePLMap()\nview = new plmap.selectMapView()\nconsole.log("new moblie plmap view created " + view.constructor.name)\n#plmap.showModal(plmap.elements.modals.mapmodal)\nview.setUserPlaceFromLocation()';
  var PLMap;

  PLMap = (function() {
    function PLMap() {
      this.elements = {
        modals: {
          mapmodal: $('#mapmodal'),
          querymodal: $('#querymodal')
        }
      };
      this.path = window.location.pathname;
      this.search = this.parseQuery(window.location.search);
      console.log('placelit.coffee :: search object: ' + JSON.stringify(this.search));
      this.scenes = window.SCENES;
      console.log('placelit.coffee :: scenes: ' + this.scenes);
    }

    PLMap.prototype.showModal = function(element) {
      return element.modal();
    };

    PLMap.prototype.isFiltered = function() {
      if ((this.path.indexOf('collections') === -1) && (this.path.indexOf('author') === -1) && (this.path.indexOf('title') === -1)) {
        return false;
      }
      return true;
    };

    PLMap.prototype.hasScenes = function() {
      return this.scenes && this.scenes.length > 0;
    };

    PLMap.prototype.selectMapView = function() {
      if (this.isFiltered() && this.hasScenes()) {
        return new PlacingLit.Views.MapFilterView(this.scenes);
      }
      return new PlacingLit.Views.MapCanvasView;
    };

    PLMap.prototype.closeFeatContent = function() {
      return $('#mapOverlay').hide();
    };

    PLMap.prototype.displayEmptyResultsError = function() {
      var alertMessage, author, author_path;
      author_path = '/map/filter/author/';
      author = decodeURIComponent(this.path.replace(author_path, ''));
      alertMessage = 'Whoa! No places found for ' + author + '. ';
      alertMessage += 'But that\'s ok!. Be the first to map this author. ';
      alertMessage += 'Click the map to add a book and author.';
      return alert(alertMessage);
    };

    PLMap.prototype.parseQuery = function(q) {
      var i, len, param, result, splitq, vals;
      result = {};
      splitq = q.split('&');
      for (i = 0, len = splitq.length; i < len; i++) {
        param = splitq[i];
        vals = param.split('=');
        result[vals[0]] = vals[1];
      }
      return result;
    };

    return PLMap;

  })();

  $(function() {
    var plmap, view;
    plmap = new PLMap();
    view = plmap.selectMapView();
    console.log('placelit.coffee :: view created: ' + view.constructor.name);
    if (location.search === '?modal=1') {
      plmap.showModal(plmap.elements.modals.mapmodal);
    } else if (plmap.isFiltered()) {
      if (plmap.scenes && plmap.scenes.length > 0) {
        plmap.closeFeatContent();
      } else {
        plmap.displayEmptyResultsError();
        if (history) {
          console.log("history should be cleared");
          history.replaceState(null, null, '/');
        }
      }
    }
    console.log("hi");
    return view.reportUserLocationToServer();
  });

}).call(this);
