// Generated by CoffeeScript 1.10.0

/*
  author @ Will Acheson
  This class is modeled after app.coffe

  funcaitonality 1:
    My goal is to have a manipulatable google map widget on the mobile app
      A list view shows nearby placing lit scenes
      Then configure the map to only be loaded if a user clicks on a nearby event
        Then the map shows that location on the map
  functionality 2:
    Add new scenes by dragging the map to the location
      The center of the screen has a marker placed, this marker is not moveable
        -- except by dragging the map
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.PlacingLit = {
    Models: {},
    Collections: {},
    Views: {}
  };


  /*
    ????? TODO: figure out why i dont hate mvc
   */

  PlacingLit.Collections.Locations = (function(superClass) {
    extend(Locations, superClass);

    function Locations() {
      return Locations.__super__.constructor.apply(this, arguments);
    }

    console.log('placingLit.Collections.Locations model utilized:  /places/show route');

    Locations.prototype.model = PlacingLit.Models.Location;

    Locations.prototype.url = '/places/show';

    return Locations;

  })(Backbone.Collection);


  /*
    Class for getting scene locations?
   */

  PlacingLit.Models.Location = (function(superClass) {
    extend(Location, superClass);

    function Location() {
      return Location.__super__.constructor.apply(this, arguments);
    }

    Location.prototype.defaults = {
      title: 'Put Title Here',
      author: 'Someone\'s Name goes here'
    };

    Location.prototype.url = '/places/add';

    return Location;

  })(Backbone.Model);


  /*
    View controller for the Google Map widget
    utilizies MarkerCluster for plotting (I think)
   */

  PlacingLit.Views.MapCanvasView = (function(superClass) {
    extend(MapCanvasView, superClass);

    function MapCanvasView() {
      return MapCanvasView.__super__.constructor.apply(this, arguments);
    }

    MapCanvasView.prototype.model = PlacingLit.Models.Location;

    MapCanvasView.prototype.el = 'map_canvas';

    MapCanvasView.prototype.gmap = null;

    MapCanvasView.prototype.infowindows = [];

    MapCanvasView.prototype.locations = null;

    MapCanvasView.prototype.userInfowindow = null;

    MapCanvasView.prototype.placeInfowindow = null;

    MapCanvasView.prototype.userMapsMarker = null;

    MapCanvasView.prototype.allMarkers = [];

    MapCanvasView.prototype.initialMapView = true;

    MapCanvasView.prototype.field_labels = {
      place_name: 'location',
      scene_time: 'time',
      actors: 'characters',
      symbols: 'symbols',
      description: 'description',
      notes: 'notes',
      visits: 'visits',
      date_added: 'added'
    };

    MapCanvasView.prototype.settings = {
      zoomLevel: {
        'wide': 4,
        'default': 5,
        'close': 14,
        'tight': 21,
        'increment': 1
      },
      markerDefaults: {
        draggable: false,
        animation: google.maps.Animation.DROP,
        icon: '/img/redpin.png'
      },
      maxTerrainZoom: 15
    };

    MapCanvasView.prototype.mapOptions = {
      zoom: 8,
      mapTypeId: google.maps.MapTypeId.ROADMAP,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.DROPDOWN_MENU,
        position: google.maps.ControlPosition.TOP_RIGHT
      },
      maxZoom: 20,
      minZoom: 2,
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.DEFAULT,
        position: google.maps.ControlPosition.LEFT_CENTER
      },
      panControlOptions: {
        position: google.maps.ControlPosition.LEFT_CENTER
      }
    };

    console.log('MapCanvasView class called');

    MapCanvasView.prototype.initialize = function(scenes) {
      console.log('MapCanvasView.initialize(scenes) executed.');
      if (this.collection == null) {
        this.collection = new PlacingLit.Collections.Locations();
      }
      this.listenTo(this.collection, 'all', this.render);
      this.collection.fetch();
      this.suggestAuthors();
      this.attachNewSceneHandler();
      return this.attachSearchHandler();
    };

    MapCanvasView.prototype.googlemap = function() {
      var map_elem;
      if (this.gmap != null) {
        return this.gmap;
      }
      map_elem = document.getElementById(this.$el.selector);
      this.gmap = new google.maps.Map(map_elem, this.mapOptions);
      this.mapCenter = this.gmap.getCenter();
      google.maps.event.addListener(this.gmap, 'bounds_changed', this.handleViewportChange);
      return this.gmap;
    };

    MapCanvasView.prototype.positionMap = function() {
      var mapcenter, usaCoords, usacenter, windowOptions;
      console.log("MapCanvasView.positionMap() called");
      if (window.CENTER != null) {
        mapcenter = new google.maps.LatLng(window.CENTER.lat, window.CENTER.lng);
        this.gmap.setCenter(mapcenter);
        if (window.location.pathname.indexOf('collections') !== -1) {
          this.gmap.setZoom(this.settings.zoomLevel.wide);
        } else {
          this.gmap.setZoom(this.settings.zoomLevel["default"]);
        }
        if (window.location.pathname.indexOf('author') !== -1) {
          this.gmap.setZoom(this.settings.zoomLevel.wide);
        }
      } else {
        usaCoords = {
          lat: 39.8282,
          lng: -98.5795
        };
        usacenter = new google.maps.LatLng(usaCoords.lat, usaCoords.lng);
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition((function(_this) {
            return function(position) {
              var userCoords;
              userCoords = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
              };
              _this.gmap.setCenter(userCoords);
              console.log("User coordinates!!  ");
              return console.log('mobileapp.js :: positionMap() lat: ' + position.coords.latitude + ' long: ' + position.coords.longitude);
            };
          })(this));
        } else {
          console.log("Else condition, position: ");
          console.log(usacenter);
          this.gmap.setCenter(usacenter);
        }
        this.gmap.setZoom(8);
      }
      if (window.PLACEKEY != null) {
        windowOptions = {
          position: mapcenter
        };
        this.openInfowindowForPlace(window.PLACEKEY, windowOptions);
      }
      return this.initialMapView = false;
    };

    MapCanvasView.prototype.setUserPlaceFromLocation = function(location) {
      console.log("MapCanvasView.setuserPlaceFromLocation(location) executed");
      console.log("--location: " + location);
      this.userPlace = locationclass(extend(PlacingLit.Models.Location, Backbone.Model));
      return {
        defaults: {
          title: 'Put Title Here',
          author: 'Someone\'s Name goes here'
        },
        url: '/places/add'
      };
    };

    MapCanvasView.prototype.suggestAuthors = function(author_data) {
      var author, i, len, li, parent, searchTxt;
      parent = document.getElementById('authorsSearchList');
      $(parent).empty();
      $(parent).show();
      searchTxt = $('#gcf').val();
      if (searchTxt !== "") {
        for (i = 0, len = author_data.length; i < len; i++) {
          author = author_data[i];
          if (author.indexOf(searchTxt) > -1) {
            li = document.createElement('li');
            li.className = 'searchResultText';
            li.innerHTML = author;
            parent.appendChild(li);
            if ($(parent).children().length > 5) {
              break;
            }
          }
        }
        return $('.searchResultText').click(function() {
          var windowLoc;
          windowLoc = window.location.protocol + '//' + window.location.host;
          return window.location.href = windowLoc + "/map/filter/author/" + this.innerHTML;
        });
      }
    };

    return MapCanvasView;

  })(Backbone.View);

}).call(this);
